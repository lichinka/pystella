#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usetheme{CambridgeUS}
% or ...

% block color setting
\setbeamercolor{block body}{use=structure,fg=gray!20!white,bg=black}

% code highlighting
\usepackage{color}
\usepackage{listings}
\lstset{language=Python,
    basicstyle=\ttfamily\bfseries,
    commentstyle=\color{red}\itshape,
  stringstyle=\color{magenta},
  showstringspaces=false,
  keywordstyle=\color{cyan}\bfseries}

\setbeamercovered{transparent}
% or whatever (possibly just delete it)
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman times
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 0
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
This file is a solution template for:
\end_layout

\begin_layout Itemize
Talk at a conference/colloquium.
 
\end_layout

\begin_layout Itemize
Talk length is about 20min.
 
\end_layout

\begin_layout Itemize
Style is ornate.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Copyright 2004 by Till Tantau <tantau@users.sourceforge.net>.
 
\end_layout

\begin_layout Plain Layout
In principle, this file can be redistributed and/or modified under the terms
 of the GNU Public License, version 2.
 However, this file is supposed to be a template to be modified for your
 own needs.
 For this reason, if you use this file as a template and not specifically
 distribute it as part of a another package/program, the author grants the
 extra permission to freely copy and modify this file as you see fit and
 even to delete this copyright notice.
 
\end_layout

\end_inset


\end_layout

\begin_layout Title
PyStella
\begin_inset Argument 1
status open

\begin_layout Plain Layout
PyStella
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
optional, use only with long paper titles
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subtitle
Python bindings for the STELLA library
\end_layout

\begin_layout Author
Lucas Benedicic
\begin_inset Flex InstituteMark
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset


\end_layout

\begin_layout Institute
\begin_inset Flex InstituteMark
status collapsed

\begin_layout Plain Layout
1
\end_layout

\end_inset

CSCS - ETH ZÃ¼rich
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
If you have a file called "institution-logo-filename.xxx", where xxx is a
 graphic format that can be processed by latex or pdflatex, resp., then you
 can add a logo by uncommenting the following:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
pgfdeclareimage[height=0.5cm]{institution-logo}{institution-logo-filename}
\end_layout

\begin_layout Plain Layout

%
\backslash
logo{
\backslash
pgfuseimage{institution-logo}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSubsection[]{%
\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}   
\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection,currentsubsection] 
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
If you wish to uncover everything in a step-wise fashion, uncomment the
 following command:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Outline
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\end_deeper
\begin_layout Section
Using STELLA
\end_layout

\begin_layout Subsection
Accessing the C++ backend
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Accessing the C++ backend
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Expose STELLA's 
\emph on
DataFields
\emph default
 and 
\emph on
Stencils
\emph default
 to Python.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\size scriptsize

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

~:> ipython
\end_layout

\begin_layout Plain Layout

In [1]: from stella import DataField
\end_layout

\begin_layout Plain Layout

In [2]: from stella.stencil import Coriolis
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
NumPy compatibility
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
DataFields
\emph default
 use 
\emph on
NumPy
\emph default
 arrays as their data storage structure.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\size scriptsize

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

In [3]: u = DataField ( )
\end_layout

\begin_layout Plain Layout

In [4]: u.storage = np.arange(6000, dtype=np.float64).reshape((100,60,1))
\end_layout

\begin_layout Plain Layout

In [5]: print (u.domain)
\end_layout

\begin_layout Plain Layout

Out [5]: (100,60,1)
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
NumPy compatibility
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Built-in support for data I/O and plotting.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\size scriptsize

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

In [6]: f=open ('/tmp/my_data.csv', 'r')
\end_layout

\begin_layout Plain Layout

In [7]: u.storage = np.fromfile (f, dtype=np.float64))
\end_layout

\begin_layout Plain Layout

In [8]: v.storage = np.fromfile (f, dtype=np.float64))
\end_layout

\begin_layout Plain Layout

In [9]: f.close ( )
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Documentation
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Interactive documentation available from Python.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\size scriptsize

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

In [9]: Coriolis?
\end_layout

\begin_layout Plain Layout

Type:        builtin_function_or_method 
\end_layout

\begin_layout Plain Layout

String form: <built-in function fromfile> 
\end_layout

\begin_layout Plain Layout

Docstring: Coriolis (in_u, in_v, in_fc, out_utens, out_vtens)
\end_layout

\begin_layout Plain Layout

Applies the Coriolis stencil using the given force over the input data
\end_layout

\begin_layout Plain Layout

fields, generating two independent output fields.
\end_layout

\begin_layout Plain Layout

Parameters:
\end_layout

\begin_layout Plain Layout

in_u  : input data field;
\end_layout

\begin_layout Plain Layout

in_v  : input data field;
\end_layout

\begin_layout Plain Layout

in_fc : a scalar representing the force applied;
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Execution
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
Stencil
\emph default
 execution from Python.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\size scriptsize

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

In [10]: c = Coriolis (u, v, 3.5, utens, vtens)
\end_layout

\begin_layout Plain Layout

In [11]: c.do ( )
\end_layout

\begin_layout Plain Layout

In [12]: print (utens)
\end_layout

\begin_layout Plain Layout

Out[12]:  
\end_layout

\begin_layout Plain Layout

array([[[  0.00000000e+00],
\end_layout

\begin_layout Plain Layout

        [  1.00000000e+00],     
\end_layout

\begin_layout Plain Layout

        [  2.00000000e+00],
\end_layout

\begin_layout Plain Layout

        ...,
\end_layout

\begin_layout Plain Layout

        [  5.70000000e+01],
\end_layout

\begin_layout Plain Layout

        [  5.80000000e+01],
\end_layout

\begin_layout Plain Layout

        [  5.90000000e+01]], 
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Complete example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\size tiny

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

# -----
\end_layout

\begin_layout Plain Layout

# Solving the solution of the heat equation by using the Laplace operator
 with a time stepping technique
\end_layout

\begin_layout Plain Layout

# -----
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

from stella.data import SwapField
\end_layout

\begin_layout Plain Layout

from stella.stencil import LaplaceStencil
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# set number of time steps to run the simulation
\end_layout

\begin_layout Plain Layout

timeSteps = 20000
\end_layout

\begin_layout Plain Layout

# boundary condition values
\end_layout

\begin_layout Plain Layout

westValue = 0.0 
\end_layout

\begin_layout Plain Layout

eastValue = 1.0
\end_layout

\begin_layout Plain Layout

# initialize the sizes of the domain of our fields
\end_layout

\begin_layout Plain Layout

fieldDomain = np.array ((100, 60, 1))
\end_layout

\begin_layout Plain Layout

# instantiate a swap field, containing input and output data fields
\end_layout

\begin_layout Plain Layout

data = SwapField (name='MyDataField', domain=fieldDomain)
\end_layout

\begin_layout Plain Layout

# initialize values of the input field to 0.5
\end_layout

\begin_layout Plain Layout

data.input.storage = np.array ([0.5] * in_data.domain.size)
\end_layout

\begin_layout Plain Layout

# instantiate the Laplace stencil object, implemented in C++ Stella
\end_layout

\begin_layout Plain Layout

laplace = LaplaceStencil (data.input, data.output, westValue, eastValue)
\end_layout

\begin_layout Plain Layout

# perform the simulation 
\end_layout

\begin_layout Plain Layout

for t in range (timeSteps):
\end_layout

\begin_layout Plain Layout

    # apply the boundary condition and the Laplace stencil     
\end_layout

\begin_layout Plain Layout

    laplace.do ( )
\end_layout

\begin_layout Plain Layout

    # show some progress information every 20 steps
\end_layout

\begin_layout Plain Layout

    if (t % 20) == 0:
\end_layout

\begin_layout Plain Layout

        print ("Step %d/%d" % (t, timeSteps))
\end_layout

\begin_layout Plain Layout

    # swap the input and output data fields
\end_layout

\begin_layout Plain Layout

    data.swap ( )
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Section
Defining new stencils
\end_layout

\begin_layout Subsection
Just-In-Time compilation
\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
New stencils in Python
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
Stencil
\emph default
 definition in pure Python using 
\emph on
NumPy.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Executable in pure Python mode.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Eases design, prototyping and debugging.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Automatic (JIT) compilation to native C++.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
New stencils in Python - example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\size tiny

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

# --- DEFINITION of the Coriolis stencil object
\end_layout

\begin_layout Plain Layout

class CoriolisKernel (StencilKernel):
\end_layout

\begin_layout Plain Layout

    """Class definition of the Coriolis stencil.-"""
\end_layout

\begin_layout Plain Layout

    def __init__ (self, utens, vtens):
\end_layout

\begin_layout Plain Layout

        super.__init__ (self)  
\end_layout

\begin_layout Plain Layout

        # output fields
\end_layout

\begin_layout Plain Layout

        self.utens = utens
\end_layout

\begin_layout Plain Layout

        self.vtens = vtens
\end_layout

\begin_layout Plain Layout

    def _USlowTensStage (self, ctr, in_v, in_fc):
\end_layout

\begin_layout Plain Layout

        """The 'Do' function of the U stage.-"""
\end_layout

\begin_layout Plain Layout

        return ( in_fc * np.average ((in_v, in_v[1, 0])) + 
\end_layout

\begin_layout Plain Layout

                 in_fc * np.average ((in_v[0, -1], in_v[1, -1])) ) / 2.0
\end_layout

\begin_layout Plain Layout

    def _VSlowTensStage (self, ctr, in_u, in_fc):
\end_layout

\begin_layout Plain Layout

        """The 'Do' function of the V stage.-"""
\end_layout

\begin_layout Plain Layout

        return ( in_fc * np.average (in_u[0, 0], in_u[0, 1]) +
\end_layout

\begin_layout Plain Layout

                 in_fc * np.average (in_u[-1, 0], in_u[-1, 1]) ) / 2.0
\end_layout

\begin_layout Plain Layout

    def kernel (self, in_u, in_v, in_fc):
\end_layout

\begin_layout Plain Layout

        """This stencil comprises two independent stages.-"""
\end_layout

\begin_layout Plain Layout

        for p in out_utens.interior_points (sweep='cKIncrement'):
\end_layout

\begin_layout Plain Layout

            self.out_utens[p] += self._USlowTensStage (p, in_v, in_fc) 
\end_layout

\begin_layout Plain Layout

        for p in out_vtens.interior_points (sweep='cKIncrement'):
\end_layout

\begin_layout Plain Layout

            self.out_vtens[p] -= self._VSlowTensStage (p, in_u, in_fc)
\end_layout

\begin_layout Plain Layout

# --- USAGE of the Coriolis stencil object
\end_layout

\begin_layout Plain Layout

kernel = CoriolisKernel (utens, vtens)
\end_layout

\begin_layout Plain Layout

kernel.compilation.should_unroll = False 
\end_layout

\begin_layout Plain Layout

kernel.compilation.backend       = 'cxx'
\end_layout

\begin_layout Plain Layout

kernel.kernel (u, v, 3.5)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
New stencils in Python - another example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Block
\begin_inset Argument 2
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\size tiny

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

# -- DEFINITION of the FastWavesSCTridiag stencil object
\end_layout

\begin_layout Plain Layout

class FastWavesSCTridiag (StencilKernel):
\end_layout

\begin_layout Plain Layout

    """Class definition of the FastWavesSCTridiag stencil.-"""
\end_layout

\begin_layout Plain Layout

    def __init__ (self, y, bet):
\end_layout

\begin_layout Plain Layout

        super.__init__ (self)         
\end_layout

\begin_layout Plain Layout

        # output fields
\end_layout

\begin_layout Plain Layout

        self.y   = y
\end_layout

\begin_layout Plain Layout

        self.bet = bet
\end_layout

\begin_layout Plain Layout

        self.tmp = DataField (self.y.get_domain ( ))
\end_layout

\begin_layout Plain Layout

    def _ForwardStage (self, ctr, in_b, in_rhs):
\end_layout

\begin_layout Plain Layout

        """The 'Do' function of the Forward stage, applied over the KMinimunCent
er.-"""
\end_layout

\begin_layout Plain Layout

        self.bet = in_b
\end_layout

\begin_layout Plain Layout

        self.y   = in_rhs / self.bet
\end_layout

\begin_layout Plain Layout

    def _ForwardStageFull (self, ctr, in_a, in_b, in_c, in_rhs):
\end_layout

\begin_layout Plain Layout

        """The 'Do' function of the Forward stage, applied over the FullDomain.-"
""
\end_layout

\begin_layout Plain Layout

        self.tmp = in_c[0, 0, -1] / self.bet
\end_layout

\begin_layout Plain Layout

        self.bet = in_b - in_a * self.tmp
\end_layout

\begin_layout Plain Layout

        self.y   = (in_rhs - in_a * self.y[0, 0, -1] / self.bet
\end_layout

\begin_layout Plain Layout

    def _BackwardStage (self, ctr, in_tmp):
\end_layout

\begin_layout Plain Layout

        """The 'Do' function of the Backward stage.-"""
\end_layout

\begin_layout Plain Layout

       self.y -= in_tmp[0, 0, 1] * self.y[0, 0, 1]
\end_layout

\begin_layout Plain Layout

    def kernel (self, in_a, in_b, in_c, in_rhs):
\end_layout

\begin_layout Plain Layout

        """Compulsory function definition.-"""
\end_layout

\begin_layout Plain Layout

        for p in self.y.interior_points (sweep='cKIncrement', height='KMinimumCent
er'):
\end_layout

\begin_layout Plain Layout

            self._ForwardStage (p, in_b, in_rhs)
\end_layout

\begin_layout Plain Layout

        for p in self.y.interior_points (sweep='cKIncrement'):
\end_layout

\begin_layout Plain Layout

            self._ForwardStageFull (p, in_a, in_b, in_c, in_rhs)
\end_layout

\begin_layout Plain Layout

        for p in self.y.interior_points (sweep='cKDecrement'):
\end_layout

\begin_layout Plain Layout

            self._BackwardStage (p, self.tmp)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Section*
Summary
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Summary
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Follows well-known, standard interfaces, e.g., 
\emph on
SciPy/NumPy
\emph default
\color none
.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Takes advantage of a rich set of existing tools for:
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\begin_layout Itemize
interactive prototyping and documentation, e.g., 
\emph on
ipython
\emph default
;
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
plotting, e.g., 
\emph on
matplotlib
\emph default
;
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
debugging, e.g., 
\emph on
ipdb
\emph default
;
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
data I/O, e.g., 
\emph on
NumPy
\emph default
.
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
An outlook is always optional.
\end_layout

\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Itemize
Outlook
\end_layout

\begin_deeper
\begin_layout Itemize
first version of Stella stencils from Python ready for the PASC GridTools
 meeting.
\end_layout

\end_deeper
\end_deeper
\end_body
\end_document
